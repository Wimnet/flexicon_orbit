# Copyright 2011,2012,2016,2018,2019 Free Software Foundation, Inc.
#
# This file was generated by gr_modtool, a tool from the GNU Radio framework
# This file is a part of gr-fullduplex
#
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.

########################################################################
# Setup library
########################################################################
include(GrPlatform) #define LIB_SUFFIX

include_directories(${Boost_INCLUDE_DIR} ${FFTW3F_INCLUDE_DIRS})
link_directories(${Boost_LIBRARY_DIRS})
link_directories(${FFTW3F_LIBRARY_DIRS})
list(APPEND fullduplex_sources
    ofdm_constellation_impl.cc
    fde_config_impl.cc
    packet_encap2_impl.cc
    digital_sic_impl.cc
    parse_stream_sync_impl.cc
    sub20_init_impl.cc
    snr_calc_impl.cc
    count_packets_impl.cc
    async_divide_impl.cc
    carrier_sense_impl.cc
    fd_message_strobe_impl.cc
    csma_control_impl.cc
    aloha_control_impl.cc
    tdd_control_impl.cc )

set(fullduplex_sources "${fullduplex_sources}" PARENT_SCOPE)
if(NOT fullduplex_sources)
    MESSAGE(STATUS "No C++ sources... skipping lib/")
    return()
endif(NOT fullduplex_sources)

# find_path(SUB_INCLUDE_DIR libsub.h)
# message("Found libsub.h at " ${SUB_INCLUDE_DIR})
find_library(SUB_LIBRARIES sub)
message("Found lib sub at " ${SUB_LIBRARIES})
# include_directories(${SUB_INCLUDE_DIR})

# set(LIBUSB_LIBRARIES /usr/local/lib/libusb-1.0.so)
find_library(LIBUSB_LIBRARIES usb-1.0)
message("Found lib usb-1.0 at " ${LIBUSB_LIBRARIES})

add_library(gnuradio-fullduplex SHARED ${fullduplex_sources})
target_link_libraries(gnuradio-fullduplex gnuradio::gnuradio-runtime ${GNURADIO_ALL_LIBRARIES} ${Boost_LIBRARIES} fftw3 ${SUB_LIBRARIES} ${LIBUSB_LIBRARIES}) 
# target_include_directories(gnuradio-fullduplex
#    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
#    PUBLIC $<INSTALL_INTERFACE:include>
#  )
set_target_properties(gnuradio-fullduplex PROPERTIES DEFINE_SYMBOL "gnuradio_fullduplex_EXPORTS")

if(APPLE)
    set_target_properties(gnuradio-fullduplex PROPERTIES
        INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib"
    )
endif(APPLE)

########################################################################
# Install built library files
########################################################################
include(GrMiscUtils)
GR_LIBRARY_FOO(gnuradio-fullduplex RUNTIME_COMPONENT "fullduplex_runtime" DEVEL_COMPONENT "fullduplex_devel")

########################################################################
# Print summary
########################################################################
message(STATUS "Using install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Building for version: ${VERSION} / ${LIBVER}")

########################################################################
# Build and register unit test
########################################################################
include(GrTest)

# If your unit tests require special include paths, add them here
#include_directories()
# List all files that contain Boost.UTF unit tests here
list(APPEND test_fullduplex_sources
)
# Anything we need to link to for the unit tests go here
list(APPEND GR_TEST_TARGET_DEPS gnuradio-fullduplex)

if(NOT test_fullduplex_sources)
    MESSAGE(STATUS "No C++ unit tests... skipping")
    return()
endif(NOT test_fullduplex_sources)

foreach(qa_file ${test_fullduplex_sources})
    GR_ADD_CPP_TEST("fullduplex_${qa_file}"
        ${CMAKE_CURRENT_SOURCE_DIR}/${qa_file}
    )
endforeach(qa_file)

